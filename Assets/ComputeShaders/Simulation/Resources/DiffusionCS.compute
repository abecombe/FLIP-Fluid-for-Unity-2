#pragma kernel Diffuse
#pragma kernel UpdateVelocity

#pragma multi_compile _ USE_NON_SOLID_CELL_FILTERING

#include "../Common.hlsl"

float4 _DiffusionParameter;

StructuredBuffer<uint> _GridTypeBufferRead;

StructuredBuffer<uint3> _GridAxisTypeBufferRead;

StructuredBuffer<float3> _GridVelocityBufferRead;
RWStructuredBuffer<float3> _GridVelocityBufferWrite;

StructuredBuffer<float3> _GridDiffusionBufferRead;
RWStructuredBuffer<float3> _GridDiffusionBufferWrite;

StructuredBuffer<uint> _GridNonSolidCellIDBufferRead;

[numthreads(128, 1, 1)]
void Diffuse(uint3 thread_id : SV_DispatchThreadID)
{
    RETURN_IF_INVALID(thread_id);

    const uint c_id = GetCellID(thread_id, _GridNonSolidCellIDBufferRead);
    const int3 c_index = CellIDToCellIndex(c_id, _GridSize);

    const uint c_types = _GridTypeBufferRead[c_id];

    if (IsSolidCell(GetMyType(c_types))) return;

    const uint3 c_axis_types = _GridAxisTypeBufferRead[c_id];

    // diffuse using Jacobi iterations
    const float3 diff = _GridDiffusionBufferRead[c_id];
    const float3 diff_xp = IsFluidCell(GetXPrevType(c_axis_types)) ? _GridDiffusionBufferRead[CellIndexToCellID(c_index + int3(-1, 0, 0), _GridSize)] : diff;
    const float3 diff_xn = IsFluidCell(GetXNextType(c_axis_types)) ? _GridDiffusionBufferRead[CellIndexToCellID(c_index + int3(1, 0, 0), _GridSize)] : diff;
    const float3 diff_yp = IsFluidCell(GetYPrevType(c_axis_types)) ? _GridDiffusionBufferRead[CellIndexToCellID(c_index + int3(0, -1, 0), _GridSize)] : diff;
    const float3 diff_yn = IsFluidCell(GetYNextType(c_axis_types)) ? _GridDiffusionBufferRead[CellIndexToCellID(c_index + int3(0, 1, 0), _GridSize)] : diff;
    const float3 diff_zp = IsFluidCell(GetZPrevType(c_axis_types)) ? _GridDiffusionBufferRead[CellIndexToCellID(c_index + int3(0, 0, -1), _GridSize)] : diff;
    const float3 diff_zn = IsFluidCell(GetZNextType(c_axis_types)) ? _GridDiffusionBufferRead[CellIndexToCellID(c_index + int3(0, 0, 1), _GridSize)] : diff;

    float3 velocity = 0;

    velocity += _DiffusionParameter.x * diff_xp;
    velocity += _DiffusionParameter.x * diff_xn;
    velocity += _DiffusionParameter.y * diff_yp;
    velocity += _DiffusionParameter.y * diff_yn;
    velocity += _DiffusionParameter.z * diff_zp;
    velocity += _DiffusionParameter.z * diff_zn;
    velocity += _DiffusionParameter.w * _GridVelocityBufferRead[c_id];

    EnforceBoundaryCondition(velocity, c_types);

    _GridDiffusionBufferWrite[c_id] = velocity;
}

[numthreads(128, 1, 1)]
void UpdateVelocity(uint3 thread_id : SV_DispatchThreadID)
{
    RETURN_IF_INVALID(thread_id);

    const uint c_id = GetCellID(thread_id, _GridNonSolidCellIDBufferRead);
    const int3 c_index = CellIDToCellIndex(c_id, _GridSize);

    const uint c_types = _GridTypeBufferRead[c_id];

    if (IsSolidCell(GetMyType(c_types))) return;

    float3 velocity = _GridDiffusionBufferRead[c_id];

    EnforceBoundaryCondition(velocity, c_types);

    _GridVelocityBufferWrite[c_id] = velocity;
}