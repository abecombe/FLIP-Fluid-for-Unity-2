#pragma kernel CalcDivergence
#pragma kernel Project
#pragma kernel UpdateVelocity

#pragma multi_compile _ USE_NON_SOLID_CELL_FILTERING

#include "../Common.hlsl"

float3 _DivergenceParameter;
float4 _PressureProjectionParameter1;
float3 _PressureProjectionParameter2;

StructuredBuffer<uint> _GridTypeBufferRead;

StructuredBuffer<float3> _GridVelocityBufferRead;
RWStructuredBuffer<float3> _GridVelocityBufferRW;

StructuredBuffer<float> _GridDivergenceBufferRead;
RWStructuredBuffer<float> _GridDivergenceBufferWrite;

StructuredBuffer<float> _GridPressureBufferRead;
RWStructuredBuffer<float> _GridPressureBufferWrite;

StructuredBuffer<uint> _GridNonSolidCellIDBufferRead;

[numthreads(128, 1, 1)]
void CalcDivergence(uint3 thread_id : SV_DispatchThreadID)
{
    RETURN_IF_INVALID(thread_id);

    const uint c_id = GetCellID(thread_id, _GridNonSolidCellIDBufferRead);
    const int3 c_index = CellIDToCellIndex(c_id);

    const uint c_types = _GridTypeBufferRead[c_id];

    if (IsSolidCell(GetMyType(c_types))) return;

    const float3 velocity = _GridVelocityBufferRead[c_id];

    float divergence = 0;

    if (IsFluidCell(GetMyType(c_types)))
    {
        const uint c_id_xn = CellIndexToCellID(c_index + int3(1, 0, 0));
        const uint c_id_yn = CellIndexToCellID(c_index + int3(0, 1, 0));
        const uint c_id_zn = CellIndexToCellID(c_index + int3(0, 0, 1));

        divergence += _DivergenceParameter.x * ((c_index.x < _GridSize.x - 1 ? _GridVelocityBufferRead[c_id_xn].x : 0.0f) - velocity.x);
        divergence += _DivergenceParameter.y * ((c_index.y < _GridSize.y - 1 ? _GridVelocityBufferRead[c_id_yn].y : 0.0f) - velocity.y);
        divergence += _DivergenceParameter.z * ((c_index.z < _GridSize.z - 1 ? _GridVelocityBufferRead[c_id_zn].z : 0.0f) - velocity.z);
    }

    _GridDivergenceBufferWrite[c_id] = divergence;
}

[numthreads(128, 1, 1)]
void Project(uint3 thread_id : SV_DispatchThreadID)
{
    RETURN_IF_INVALID(thread_id);

    const uint c_id = GetCellID(thread_id, _GridNonSolidCellIDBufferRead);
    const int3 c_index = CellIDToCellIndex(c_id);

    const uint c_types = _GridTypeBufferRead[c_id];

    if (IsSolidCell(GetMyType(c_types))) return;

    float pressure = 0;

    if (IsFluidCell(GetMyType(c_types)))
    {
        // project using Jacobi iterations
        uint c_id_xp = CellIndexToCellID(c_index + int3(-1, 0, 0));
        c_id_xp = IsSolidCell(GetXPrevType(c_types)) ? c_id : c_id_xp;
        uint c_id_xn = CellIndexToCellID(c_index + int3(1, 0, 0));
        c_id_xn = IsSolidCell(GetXNextType(c_types)) ? c_id : c_id_xn;
        uint c_id_yp = CellIndexToCellID(c_index + int3(0, -1, 0));
        c_id_yp = IsSolidCell(GetYPrevType(c_types)) ? c_id : c_id_yp;
        uint c_id_yn = CellIndexToCellID(c_index + int3(0, 1, 0));
        c_id_yn = IsSolidCell(GetYNextType(c_types)) ? c_id : c_id_yn;
        uint c_id_zp = CellIndexToCellID(c_index + int3(0, 0, -1));
        c_id_zp = IsSolidCell(GetZPrevType(c_types)) ? c_id : c_id_zp;
        uint c_id_zn = CellIndexToCellID(c_index + int3(0, 0, 1));
        c_id_zn = IsSolidCell(GetZNextType(c_types)) ? c_id : c_id_zn;

        pressure += _PressureProjectionParameter1.x * (_GridPressureBufferRead[c_id_xp] + _GridPressureBufferRead[c_id_xn]);
        pressure += _PressureProjectionParameter1.y * (_GridPressureBufferRead[c_id_yp] + _GridPressureBufferRead[c_id_yn]);
        pressure += _PressureProjectionParameter1.z * (_GridPressureBufferRead[c_id_zp] + _GridPressureBufferRead[c_id_zn]);
        pressure += _PressureProjectionParameter1.w * _GridDivergenceBufferRead[c_id];
    }

    _GridPressureBufferWrite[c_id] = pressure;
}

[numthreads(128, 1, 1)]
void UpdateVelocity(uint3 thread_id : SV_DispatchThreadID)
{
    RETURN_IF_INVALID(thread_id);

    const uint c_id = GetCellID(thread_id, _GridNonSolidCellIDBufferRead);
    const int3 c_index = CellIDToCellIndex(c_id);

    const uint c_types = _GridTypeBufferRead[c_id];

    if (IsSolidCell(GetMyType(c_types))) return;

    uint c_id_xp = CellIndexToCellID(c_index + int3(-1, 0, 0));
    c_id_xp = IsSolidCell(GetXPrevType(c_types)) ? c_id : c_id_xp;
    uint c_id_yp = CellIndexToCellID(c_index + int3(0, -1, 0));
    c_id_yp = IsSolidCell(GetYPrevType(c_types)) ? c_id : c_id_yp;
    uint c_id_zp = CellIndexToCellID(c_index + int3(0, 0, -1));
    c_id_zp = IsSolidCell(GetZPrevType(c_types)) ? c_id : c_id_zp;

    float3 velocity = _GridVelocityBufferRW[c_id];

    const float pressure = _GridPressureBufferRead[c_id];

    velocity.x -= _PressureProjectionParameter2.x * (pressure - _GridPressureBufferRead[c_id_xp]);
    velocity.y -= _PressureProjectionParameter2.y * (pressure - _GridPressureBufferRead[c_id_yp]);
    velocity.z -= _PressureProjectionParameter2.z * (pressure - _GridPressureBufferRead[c_id_zp]);

    EnforceBoundaryCondition(velocity, c_types);

    _GridVelocityBufferRW[c_id] = velocity;
}